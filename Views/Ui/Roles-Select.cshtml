@{
    ViewData["Title"] = "Select Role";
}
@model AuthenticationAPI.Models.ViewModels.RoleSelectionViewModel

<link rel="stylesheet" href="@(Url.Content("~/css/Roles-Selection.css"))" />

<div class="container">
    <div class="logo-header">
        <div class="logo">
            <span class="logo-text">BCMTrac</span>
        </div>
        <div class="welcome-text">Welcome Back</div>
        <div class="subtitle">Please select the type user you are registered on:</div>
    </div>

    <form asp-action="RolesSelectPost" method="post" novalidate>
        @Html.AntiForgeryToken()
		
        <input asp-for="SelectedRole" type="hidden" id="SelectedRole" />
        <div class="validation-summary">@Html.ValidationSummary()</div>
        <span class="field-error" asp-validation-for="SelectedRole"></span>

        <div class="user-type-buttons" id="roleButtons">
            @if (Model.AvailableRoles != null && Model.AvailableRoles.Any())
            {
                foreach (var r in Model.AvailableRoles)
                {
                    var isSelected = string.Equals(Model.SelectedRole, r, System.StringComparison.OrdinalIgnoreCase);
                    <button type="button"
                            class="user-type-btn@(isSelected ? " selected" : "")"
                            data-type="@r"
                            aria-pressed="@(isSelected.ToString().ToLower())">
                        @r
                    </button>
                }
            }
            else
            {
                <p class="muted">No roles assigned.</p>
            }
        </div>

        <button class="continue-btn" id="continueBtn" type="submit" style="display:@(string.IsNullOrWhiteSpace(Model.SelectedRole) ? "none" : "inline-block")">
            Continue
        </button>
    </form>
</div>

<div class="footer">
    <div>Copyright Â© 2015 - 2025</div>
    <div><a href="#">Website Terms of Use</a></div>
</div>

@section Scripts {
    <script>
        (function () {
            const container = document.getElementById('roleButtons');
            const hidden = document.getElementById('SelectedRole');
            const submitBtn = document.getElementById('continueBtn');

            if (!container || !hidden || !submitBtn) return;

            const initial = hidden.value;
            if (initial) {
                const btn = [...container.querySelectorAll('.user-type-btn')]
                    .find(b => (b.dataset.type || '').toLowerCase() === initial.toLowerCase());
                if (btn) {
                    btn.classList.add('selected');
                    btn.setAttribute('aria-pressed', 'true');
                    submitBtn.style.display = 'inline-block';
                }
            }

            container.addEventListener('click', (e) => {
                const btn = e.target.closest('.user-type-btn');
                if (!btn) return;

                container.querySelectorAll('.user-type-btn').forEach(b => {
                    b.classList.remove('selected');
                    b.setAttribute('aria-pressed', 'false');
                });

                btn.classList.add('selected');
                btn.setAttribute('aria-pressed', 'true');
                
                hidden.value = btn.dataset.type || '';

                submitBtn.style.display = hidden.value ? 'inline-block' : 'none';
            });
        })();
    </script>

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
